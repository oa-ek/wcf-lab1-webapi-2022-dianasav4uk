// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyApp.Server.Core;

#nullable disable

namespace PharmacyApp.Server.Core.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    partial class PharmacyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PharmacyApp.Server.Core.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catalog");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Лікарські засоби"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Краса та догляд"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "img\\catalogue\\flu.jpg",
                            Name = "Застуда і грип"
                        },
                        new
                        {
                            Id = 2,
                            Image = "img\\catalogue\\heart.jpg",
                            Name = "Серцево-судинна система"
                        },
                        new
                        {
                            Id = 3,
                            Image = "img\\catalogue\\blood.jpg",
                            Name = "Кровотворення та кров"
                        },
                        new
                        {
                            Id = 4,
                            Image = "img\\catalogue\\8000131.jpg",
                            Name = "Противірусні"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Medicaments", b =>
                {
                    b.Property<int>("MedicamentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicamentsId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ReleaseForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicamentsId");

                    b.ToTable("Medicaments");

                    b.HasData(
                        new
                        {
                            MedicamentsId = 1,
                            Code = "4882",
                            Dosage = "",
                            Image = "img\\catalogue\\sinupret.jpg",
                            Name = "Синупрет табл. в/о №50",
                            Price = 125.62f,
                            ReleaseForm = "таблетки для внутрішнього застосування"
                        },
                        new
                        {
                            MedicamentsId = 2,
                            Code = "2345",
                            Dosage = "12",
                            Image = "img\\catalogue\\sinupret.jpg",
                            Name = "Синупрет",
                            Price = 89.75f,
                            ReleaseForm = "таблетки для внутрішнього застосування"
                        },
                        new
                        {
                            MedicamentsId = 3,
                            Code = "2434",
                            Dosage = "12",
                            Image = "img\\catalogue\\milistan.jpg",
                            Name = "Мілістан мультисимптомний каплети, в/о блістер №12",
                            Price = 175f,
                            ReleaseForm = "таблетки для внутрішнього застосування"
                        },
                        new
                        {
                            MedicamentsId = 4,
                            Code = "2487",
                            Dosage = "15",
                            Image = "img\\catalogue\\captopres.jpg",
                            Name = "Каптопрес 12,5-Дарниця",
                            Price = 89.75f,
                            ReleaseForm = "таблетки"
                        },
                        new
                        {
                            MedicamentsId = 5,
                            Code = "4715",
                            Dosage = "16",
                            Image = "img\\catalogue\\stoptys.jpg",
                            Name = "Стоптусин-Тева",
                            Price = 89.75f,
                            ReleaseForm = "таблетки"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<int?>("detailsId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("detailsId");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderAddress");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<string>("TypeOfDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.OrderItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MedicamentsId")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailsId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentsId");

                    b.HasIndex("OrderDetailsId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1,
                            Name = "Від кашлю"
                        },
                        new
                        {
                            SubCategoryId = 2,
                            Name = "Ліки від грипу"
                        },
                        new
                        {
                            SubCategoryId = 3,
                            Name = "Від підвищеного тиску"
                        });
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.SubCategoryMedicaments", b =>
                {
                    b.Property<int>("MedicamentsId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("MedicamentsId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubCategoryMedicaments");

                    b.HasData(
                        new
                        {
                            MedicamentsId = 1,
                            SubCategoryId = 1
                        },
                        new
                        {
                            MedicamentsId = 2,
                            SubCategoryId = 1
                        },
                        new
                        {
                            MedicamentsId = 3,
                            SubCategoryId = 2
                        },
                        new
                        {
                            MedicamentsId = 4,
                            SubCategoryId = 3
                        },
                        new
                        {
                            MedicamentsId = 5,
                            SubCategoryId = 1
                        });
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Category", b =>
                {
                    b.HasOne("PharmacyApp.Server.Core.Catalog", "Catalog")
                        .WithMany("Category")
                        .HasForeignKey("CatalogId");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Order", b =>
                {
                    b.HasOne("PharmacyApp.Server.Core.OrderDetails", "details")
                        .WithMany()
                        .HasForeignKey("detailsId");

                    b.HasOne("PharmacyApp.Server.Core.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("details");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.OrderDetails", b =>
                {
                    b.HasOne("PharmacyApp.Server.Core.OrderAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.OrderItems", b =>
                {
                    b.HasOne("PharmacyApp.Server.Core.Medicaments", "medicaments")
                        .WithMany()
                        .HasForeignKey("MedicamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApp.Server.Core.OrderDetails", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrderDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medicaments");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.SubCategory", b =>
                {
                    b.HasOne("PharmacyApp.Server.Core.Category", "Category")
                        .WithMany("SubCategory")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.SubCategoryMedicaments", b =>
                {
                    b.HasOne("PharmacyApp.Server.Core.Medicaments", "Medicaments")
                        .WithMany("SubCategories")
                        .HasForeignKey("MedicamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyApp.Server.Core.SubCategory", "SubCategory")
                        .WithMany("Medicaments")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicaments");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Catalog", b =>
                {
                    b.Navigation("Category");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Category", b =>
                {
                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.Medicaments", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.OrderDetails", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("PharmacyApp.Server.Core.SubCategory", b =>
                {
                    b.Navigation("Medicaments");
                });
#pragma warning restore 612, 618
        }
    }
}
